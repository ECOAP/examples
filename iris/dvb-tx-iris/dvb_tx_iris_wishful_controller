#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
dvb_tx_iris_wishful_controller.py: implementation of the DVB-TX-IRIS WiSHFUL controller

Usage:
   dvb_tx_iris_wishful_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./dvb_tx_iris_wishful_controller -v --config ./controller_config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis

__author__ = "G. Baruffa, A. Liberato"
__copyright__ = "Copyright (c) 2016, WiSHFUL project"
__version__ = "0.1.0"
__email__ = "giuseppe.baruffa@unipg.it,liberata@tcd.ie"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
nodes = []

@controller.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:")
    print(node)

@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))

@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("{} DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(datetime.datetime.now(), group, node.name, cmd, data))


def print_response(group, node, data):
    print("{} Print response : Group:{}, NodeIP:{}, Result:{}".format(datetime.datetime.now(), group, node.ip, data)) 

def check_parameter(parameter):
    try:
        int(parameter)
        return True
    except ValueError:
        return False    

def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()

    #control loop
    while True:
        print ("************************ Wishful Controller  ************************ ")
        print ("*                                                                   * ")
        print ("********************  DVB-TX-IRIS Integration   ********************* ")
        print ("")
        #control loop
        control = 0
        while True:
            send_freq = input("Change the frequency: (y/n): ")
            if (send_freq == "y"):
                value_freq = input("Write the new frequency: ")
                if check_parameter(value_freq):
                    control = 1
                else:
                    send_freq = "n"
                    print ("Invalid value.")

            send_gain = input("Change the gain: (y/n): ")
            if (send_gain == "y"):
                value_gain = input("Write the new gain: ")
                if check_parameter(value_gain):
                    control = 1
                else:
                    send_gain = "n"
                    print ("Invalid value.")
                    
            send_outpower = input("Change the outpower: (y/n): ")
            if (send_outpower == "y"):
                value_outpower = input("Write the new outpower: ")
                if check_parameter(value_outpower):
                    control = 1
                else:
                    send_outpower = "n"
                    print ("Invalid value.")

            gevent.sleep(10)
            
            if (nodes and control == 1):
                print("\n")
                print ("Sending parameters. . . ")
                print("\n")
                if (send_freq == "y"):
                    controller.blocking(False).node(nodes[0]).radio.iface('iris').set_frequency(str(value_freq))
                if (send_gain == "y"):
                    controller.blocking(False).node(nodes[0]).radio.iface('iris').set_gain(value_gain)
                if (send_outpower == "y"):
                    controller.blocking(False).node(nodes[0]).radio.iface('iris').set_outpower(value_outpower)
            
            if (control == 1):
                    print ("Waiting return code. . . ")
                    gevent.sleep(6)
            break
        break


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
