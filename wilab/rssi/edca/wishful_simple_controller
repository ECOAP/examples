#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py --ip-controller <IP_ADDRESS>

Example:
   ./wishful_simple_local_controller -v --ip-controller 127.0.0.1

Options:
   --ip-controller     IP address of the global controller
"""

import logging
import wishful_controller
import gevent
import wishful_framework.upi_arg_classes.edca as edca
import argparse

__author__ = "Piotr Gawlowicz, Mikolaj Chwalisz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, chwalisz}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')


def main(controller, nodes):

    edcaParams = edca.EdcaQueueParameters(
        aifs=123, cwmin=127, cwmax=511, txop=0)
    # control loop
    while True:
        gevent.sleep(10)
        log.info("\n")
        log.info("Connected nodes %s", nodes)
        if nodes:
            controller.blocking(False).nodes(nodes).radio.iface(
                "wlan0").set_mac_access_parameters(queueId=0, qParam=edcaParams)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--ip_controller", help="increase output verbosity")
    args = parser.parse_args()

    log_level = logging.INFO  # default
    logfile = None
    logging.basicConfig(filename=logfile, level=log_level,
                        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    controller_ip = args.ip_controller
    # Create controller
    controller = wishful_controller.Controller(
        dl="tcp://" + controller_ip + ":8990", ul="tcp://" + controller_ip + ":8989")

    # Configure controller
    controller.set_controller_info(
        name="WishfulController", info="WishfulControllerInfo")
    controller.add_module(moduleName="discovery", pyModuleName="wishful_module_discovery_pyre",
                          className="PyreDiscoveryControllerModule",
                          kwargs={"iface": "eth0", "groupName": "wishful_wilab", "downlink": "tcp://" + controller_ip + ":8990", "uplink": "tcp://" + controller_ip + ":8989"})
    nodes = []

    @controller.new_node_callback()
    def new_node(node):
        nodes.append(node)
        print("New node appeared:")
        print(node)

    @controller.node_exit_callback()
    def node_exit(node, reason):
        if node in nodes:
            nodes.remove(node)
        print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))

    @controller.set_default_callback()
    def default_callback(group, node, cmd, data):
        print("DEFAULT CALLBACK : Group: {}, NodeId: {}, Cmd: {}, Returns: {}".format(
            group, node.id, cmd, data))

    controller.start()

    try:
        main(controller,nodes)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
