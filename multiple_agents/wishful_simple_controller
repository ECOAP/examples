#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py [options] [-q | -v]

Options:
   -f                  foo
   --config configFile config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis

__author__ = "Piotr Gawlowicz, Mikolaj Chwalisz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, chwalisz}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller(dl="tcp://127.0.0.1:8990", ul="tcp://127.0.0.1:8989")
nodes = []
node0 = None
node1 = None
#TODO: allways return call_id to identify response in callback?

@controller.new_node_callback()
def new_node_cb(node):
    global node0, node1, nodes
    nodes.append(node)

    if node.name == "agent_1":
        node0 = node
    elif node.name == "agent_2":
        node1 = node

    print "New node appeared: {}".format(node.name)

@controller.node_exit_callback()
def node_exit_cb(node, reason):
    global node0, node1, nodes
    if node in nodes:
        nodes.remove(node);

    if node.name == "agent_1":
        node0 = None
    elif node.name == "agent_2":
        node1 = None

    print "NodeExit : NodeName : {} Reason : {}".format(node.name, reason)


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print "DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(group, node.name, cmd, data)


@controller.add_callback(upis.radio.set_channel)
def set_channel_reponse(group, node, data):
    print "set_channel_reponse : Group:{}, NodeName:{}, msg:{}".format(group, node.name, data)
    controller.delay(3).node(node).net.create_packetflow_sink(port=1234)


@controller.add_callback(upis.radio.get_channel)
def get_channel_reponse(group, node, data):
    print "get_channel_reponse : Group:{}, NodeName:{}, msg:{}".format(group, node.name, data)


def print_response(group, node, data):
    print "Print response : Group:{}, NodeName:{}, Result:{}".format(group, node.name, data) 


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
   

    #wait for 2 nodes
    while True:
        print "Waiting for 2 nodes"
        gevent.sleep(2)

        #control loop
        while node0 and node1:
            print ""
            print "Connected nodes", [str(node.name) for node in nodes]

            #execute non-blocking function immediately
            controller.nodes(nodes).radio.iface("wlan0").set_power(12)
            controller.nodes([node0, node1]).net.create_packetflow_sink(port=1234)

            #execute non-blocking function immediately, with specific callback
            controller.callback(print_response).nodes(nodes).radio.iface("wlan0").get_power()

            #schedule non-blocking function
            exec_time = datetime.datetime.now() + datetime.timedelta(seconds=3)
            controller.exec_time(exec_time).nodes(nodes).radio.iface("wlan1").set_channel(4)

            #execute blocking function immediately
            result = controller.blocking(True).nodes([node0, node1]).radio.iface("wlan1").get_channel()
            print "Channel in nodes:"
            for node, value in result.iteritems():
                print "\tNodeName: {}, Channel: {}".format(node.name, value)

            gevent.sleep(10)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logging.basicConfig(level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()