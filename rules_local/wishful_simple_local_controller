#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_simple_local_controller.py: First implementation of WiSHFUL controller

Usage:
   wishful_simple_local_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_agent
import time
import yaml
from scapy.all import *
import wishful_upis as upis
from wishful_framework import TimeEvent, PktEvent, MovAvgFilter, PeakDetector, Match, Action, Permanance, PktMatch, FieldSelector

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2015, Technische UniversitÃ¤t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


simpleModuleLogger = logging.getLogger('SimpleModule2')
simpleModuleLogger.setLevel(logging.CRITICAL)

log = logging.getLogger('wishful_agent.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

@controller.add_callback(upis.radio.set_channel)
def set_channel_reponse(data):
    print "{} set_channel_reponse : {}".format(datetime.datetime.now(),data)
    controller.delay(4).net.create_packetflow_sink(port=1234)

@controller.add_callback(upis.radio.get_power)
def get_power_reponse(data):
    print "{} get_power_reponse : {}".format(datetime.datetime.now(),data)

@controller.set_default_callback()
def default_callback(cmd, data):
    print "{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data)

def upi_based_rule_matched(ruleId, data):
    print "{} UPI based Rule with id: {} was matched; Data: {}".format(datetime.datetime.now(), ruleId, data) 

def pkt_based_rule_matched(ruleId, data):
    print "{} Pkt Rule with id: {} was matched; Data: {}".format(datetime.datetime.now(), ruleId, data) 

def pkt_based_rule(ruleId, pkt):
    print "{} Pkt Rule with id: {} was matched;".format(datetime.datetime.now(), ruleId)
    try:
      print pkt.show()
    except:
      print pkt
    print ""

def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()
   
    #control loop
    while True:
        #######################################################################################
        print "{} Installing new UPI based rule".format(datetime.datetime.now())
        ruleDesc = controller.rule.add(event=TimeEvent(func=upis.radio.get_noise, kwargs={}, interval=0.2, iface="wlan0"),
                                       filters=[MovAvgFilter(10), PeakDetector(-90)],
                                       match=Match(">", -70),
                                       action=Action(upis.radio.set_channel, iface="wlan0", kwargs={"channel":8}),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=upi_based_rule_matched)

        print "{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id)
        time.sleep(10)

        retVal = ruleDesc.remove()
        print "{} Rule with ID: {} was {}".format(datetime.datetime.now(), ruleDesc.id, retVal)
        time.sleep(1)

        #######################################################################################
        print "{} Installing new UPI (GENERATOR) based rule".format(datetime.datetime.now())
        ruleDesc = controller.rule.add(event=TimeEvent(func=upis.radio.get_rssi, kwargs={}, iface="wlan0"),
                                       filters=[MovAvgFilter(10)],
                                       match=Match(">", -40),
                                       action=Action(upis.radio.set_channel, iface="wlan0", kwargs={"channel":8}),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=upi_based_rule_matched)l

        print "{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id)
        time.sleep(10)

        retVal = ruleDesc.remove()
        print "{} Rule with ID: {} was {}".format(datetime.datetime.now(), ruleDesc.id, retVal)
        time.sleep(1)

        #######################################################################################
        print "{} Installing new packet based rule".format(datetime.datetime.now())
        ruleDesc = controller.rule.add(event=PktEvent(iface="eth0"),
                                       pktMatch=PktMatch("icmp"),
                                       selector=FieldSelector("IP.ttl"),
                                       filters=[MovAvgFilter(10), PeakDetector(40)],
                                       match=Match(">", 40),
                                       action=Action(upis.radio.set_channel, iface="wlan0", kwargs={"channel":8}),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=pkt_based_rule_matched)

        print "{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id)
        time.sleep(10)

        retVal = ruleDesc.remove()
        print "{} Rule with ID: {} was {}".format(datetime.datetime.now(), ruleDesc.id, retVal)
        time.sleep(1)

        #######################################################################################
        print "{} Get dest of all packets".format(datetime.datetime.now())
        ruleDesc = controller.rule.add(event=PktEvent(iface="eth0"),
                                       selector=FieldSelector("IP.dst"),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=pkt_based_rule_matched)

        print "{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id)
        time.sleep(10)

        retVal = ruleDesc.remove()
        print "{} Rule with ID: {} was {}".format(datetime.datetime.now(), ruleDesc.id, retVal)
        time.sleep(1)

        #######################################################################################
        print "{} Get all packets".format(datetime.datetime.now())
        ruleDesc = controller.rule.add(event=PktEvent(iface="eth0"),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=pkt_based_rule)


        print "{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id)
        time.sleep(10)

        retVal = ruleDesc.remove()
        print "{} Rule with ID: {} was {}".format(datetime.datetime.now(), ruleDesc.id, retVal)
        time.sleep(1)

        #######################################################################################
        time.sleep(10)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        agent.stop()