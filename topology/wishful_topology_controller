#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_topology_controller.py: First implementation of WiSHFUL controller for wireless topology in IEEE 802.11.
From the set of wireless nodes it estimates:
- which pair of nodes is in carrier sensing range,
- which pair of nodes is in communication range,
- based on above information it estimates the hidden nodes

Usage:
   wishful_topology_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_topology_controller -v --config ./config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis

__author__ = "Anatolij Zubow"
__copyright__ = "Copyright (c) 2016, Technische UniversitÃ¤t Berlin"
__version__ = "0.1.0"
__email__ = "{zubow}@tkn.tu-berlin.de"

# params
# iface to use
wlan_iface = 'wifi0'
wlan_inject_iface = 'mon0'

log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller(dl="tcp://127.0.0.1:8990", ul="tcp://127.0.0.1:8989")
nodes = []
gateway_ip = "192.168.103.123"

@controller.new_node_callback()
def new_node_cb(node):
    nodes.append(node.id)
    log.debug('NodeEnter: NodeID: %s' % node.id)
    if node.ip == gateway_ip:
        gateway = node


@controller.node_exit_callback()
def exit_node_cb(node, reason):
    if node.id in nodes:
        nodes.remove(node.id)
    log.debug("NodeExit : NodeID : %s Reason : %s" % (node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    log.debug("DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(group, node.name, cmd, data))


def perform_hidden_node_detection(nodes, CSmat, CRmat):
    log.debug("perform_hidden_node_detection")


'''
    main entry point ...
'''
def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.add_upi_module(upi="global", pyModuleName="wishful_module_wireless_topology ", 
                          className="WirelessTopologyModule", importAs="wireless_topology")
    controller.start()
   
    log.debug("waiting for nodes ...")

    # wait until all nodes become available
    while True:
        gevent.sleep(1)

        if len(nodes) >= 2:
            # we need at least two nodes
            break

    log.debug(" ... done: %s" % str(nodes))

    # CS test
    log.debug("Testing carrier sensing ...")
    CSmat = controller.blocking(True).wireless_topology.estimate_nodes_in_carrier_sensing_range(nodes, wlan_inject_iface, TAU=0.9)
    log.debug("done ... %s" % str(CSmat))

    # CR test
    log.debug("Testing communication range ...")
    CRmat = controller.blocking(True).wireless_topology.estimate_nodes_in_communication_range(nodes, wlan_inject_iface, MINPDR=0.9)
    log.debug("done ... %s" % str(CRmat))

    # HN detection
    perform_hidden_node_detection(nodes, CSmat, CRmat)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()