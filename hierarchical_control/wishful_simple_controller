#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py [options] [-q | -v]

Options:
   -f                  foo
   --config configFile config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis

__author__ = "Piotr Gawlowicz, Mikolaj Chwalisz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, chwalisz}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller(dl="tcp://127.0.0.1:8990", ul="tcp://127.0.0.1:8989")
nodes = []

@controller.new_node_callback()
def printNodeName(node):
    nodes.append(node)
    print "New node appeared:"
    print node


@controller.node_exit_callback()
def printNodeName(node, reason):
    if node in nodes:
        nodes.remove(node);
    print "NodeExit : NodeID : {} Reason : {}".format(node.id, reason)


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print "DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(group, node.name, cmd, data)


#Definition of Local Control Program
def my_local_control_program(controller):
    #do all needed imports here!!!
    import time
    import random

    @controller.set_default_callback()
    def default_callback(cmd, data):
        print "DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(cmd, data)

    #control loop
    while not controller.is_stopped():
        print "\nNext iteration:"
        result = controller.blocking(True).radio.iface("wlan0").get_channel()
        print "Channel is:", result
        
        controller.send_upstream({"myChannel":result})

        newChannel = random.randint(0, 30)
        print "Setting channel:", newChannel
        controller.delay(2).radio.iface("wlan0").set_channel(newChannel)
        time.sleep(3)


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.add_upi_module(upi="global", pyModuleName="wishful_module_hierarchical_control ", 
                          className="HierarchicalControlModule", importAs="hc")

    controller.start()
   
    #control loop
    while True:
        print "\n"
        print "Connected nodes", [str(node.name) for node in nodes]
        if nodes:
            fid = controller.node(nodes[0]).hc.start_local_control_program(program=my_local_control_program)
            print "Local Control Progam Started, ID: {}".format(fid)
            gevent.sleep(10)

            retVal = controller.node(nodes[0]).hc.stop_local_control_program(fid)
            print "Local Control Progam ID: {} was {}".format(fid, retVal)
        gevent.sleep(10)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logging.basicConfig(level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()