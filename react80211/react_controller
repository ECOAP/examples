#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
RAS implementation in WiSHFUL Project

Usage:
   react_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path
   --nodes name for nodes setup 
   --experiment_info name experiment setup

Example:
   ./showcase3_controller_power -v --config ./controller_config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

"""
DEMO visualizer START

    ssh -L 8300:"pc controlle node":8300 dgarlisi@ops.wilab2.ilabt.iminds.be -v

    eg. ssh -L 8300:apuN4:8300 dgarlisi@ops.wilab2.ilabt.iminds.be -v


    on local pc
        python demo_visualizer.py
"""


"""
DEMO START

 on not RAS station nodes
    sudo ./wishful_ras_agent --config agent_cfg.yaml

 on RAS station node
    sudo ./wishful_ras_agent --config  agent_ras_cfg.yaml

 on PC node
    ./wishful_ras_controller --config controller_cfg.yaml
"""


from scapy.all import *
import threading
import datetime
import logging
import sys
import time
import gevent
import signal
import os
import yaml
import zmq
import json
from node_setup import *


sys.path.append('../../')
sys.path.append("../../agent_modules/wifi_ath")
sys.path.append("../../agent_modules/wifi_wmp")
sys.path.append("../../agent_modules/wifi")
#sys.path.append("../../agent_modules/iperf/wishful_module_iperf/")
sys.path.append('../../upis')
sys.path.append('../../framework')
sys.path.append('../../agent')
sys.path.append('../../controller')

import wishful_controller
import wishful_upis as upis
from react_local_control_program import react

__author__ = "Domenico Garlisi"
__copyright__ = "Copyright (c) 2015, CNIT"
__version__ = "0.1.0"
__email__ = "domenico.garlisi@cnit.it"


"""
NODE IP

apuN4 : 10.11.16.104
apuT1 : 10.11.16.126
apuU1 : 10.11.16.130
apuO2 : 10.11.16.107
apuP4 : 10.11.16.112
apuU4 : 10.11.16.132
apu04 : 10.11.16.108 (RAS)
apuO5 : 10.11.16.109
"""


"""
Setting of experiment nodes, ip address and name
"""
#PC
controller_PC_name = "apuN4"
controller_PC_ip_address = "10.11.16.104"
controller_PC_interface = "eth0"

# AP1 set in monitor on channel 40
ap1_name = "apuT1"
ap1_ip = "10.11.16.126"
ap1_wlan_interface = "wlan0"

# STA1 set in monitor on channel 40
sta1_name = "apu04"
sta1_ip = "10.11.16.108"
sta1_wlan_interface = "wlan0"

# AP2
ap2_name = "apuU1"
ap2_ip = "10.11.16.130"
ap2_wlan_interface = "wlan0"

# STA2
sta2_name = "apuU4"
sta2_ip = "10.11.16.132"
sta2_wlan_interface = "wlan0"


#Nodes number
nodes_number=4
ap_wlan_interface = "wlan0"
sta_wlan_interface = "wlan0"

# BSSID of our Network
network_bssid = "wishful_ras_example"
group_name = "ras_example"

"""
END setting of experiment nodes
"""

log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()

nodes = []
configuration_message_for_visualizzer = {}
ap1_node = None
sta1_node= None

ap2_node = None
sta2_node= None


@controller.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:")
    print(node)


@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("{} DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(datetime.datetime.now(), group, node.name, cmd, data))




def send_react(node_id):
     for i in range(0,10): 
       my_mac= controller.nodes(node_id).net.get_iface_hw_addr(iface="wlan0")
       my_data={'name':'fabrizio'}
       json_data=json.dumps(my_data)
       a=RadioTap()/Dot11(addr1="ff:ff:ff:ff:ff:ff", addr2=my_mac, addr3="ff:ff:ff:ff:ff:ff")/json_data
       rvalue = controller.nodes(node_id).net.inject_frame(iface="mon0", frame=a, is_layer_2_packet=True, tx_count=1, pkt_interval=1)
       gevent.sleep(1)

def csResultCollector1(group, node, data):
    messagedata = data
    log.info('1 - receives data msg at %s - %s' % (str(node.ip), str(messagedata) ))

def main(args):
    # get info from configuration csv file

    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)

    nodes_info_path=args['--nodes']
    [hosts,driver,eth_ip,freq,tx_power,wlan_ip]=set_hosts(nodes_info_path);
    print([hosts,driver,eth_ip,freq,tx_power,wlan_ip])
    experiment_info_path=args['--experiment_info']
    if experiment_info_path:
	    [src,dst,bw_req,port,t_start,t_stop]=experiment_setup(experiment_info_path)

    #Start controller
    controller.start()

    #control loop
    while True:
        gevent.sleep(1)
        print("\nConnected nodes", [str(node.name) for node in nodes])
	
        if len(nodes) == 2:

#SETUP NODES, RUN REACT
          lcpDescriptor = None;
          for ii in range(0, len(hosts)):
            for jj in range(0, len(nodes)):
              if nodes[jj].ip in eth_ip[ii]:
                pos=eth_ip.index(nodes[jj].ip)
                rvalue = controller.nodes(nodes[jj]).net.start_adhoc(driver[pos],"wlan0","wishful-react",freq[pos],tx_power[pos],"6",wlan_ip[pos],"250","aa:bb:cc:dd:ee:ff",True)
                gevent.sleep(5)
                rvalue = controller.nodes(nodes[jj]).net.start_monitor(driver[pos],"wlan0")
                gevent.sleep(5)
                """
                lcpDescriptor = controller.node(nodes[jj]).hc.start_local_control_program(program=react)
                msg={"iface":"wlan0","i_time":1,"iperf_rate":0,"enable_react":False}
                lcpDescriptor.send(msg)
                """

          break
          """
          for jj in range(0, len(nodes)):
              if nodes[jj].ip == "10.11.16.22":
                  print ("got: 10.11.16.22")
                  my_tstart=2
                  my_tstop=30
                  my_port=5001
                  controller.nodes(nodes[jj]).net.create_packetflow_sink(str(my_port))

              if nodes[jj].ip == "10.11.16.33":
                  controller.nodes(nodes[jj]).net.start_packetflow('192.168.0.1', '5001', '100')
          """

          for i_flow in range(0,len(src)):
             for jj in range(0, len(nodes)):
               if nodes[jj].ip == eth_ip[int(dst[i_flow])-1]:
                  print ("SERVER: nodes.ip: {} port={} t_start={} t_stop={}".format(nodes[jj].ip,port[i_flow],t_start[i_flow],t_stop[i_flow]))
#                  exec_time = datetime.datetime.now() + datetime.timedelta(int(t_start[i_flow]))
#                  controller.callback(csResultCollector1).nodes(nodes[jj]).net.create_packetflow_sink(str(port[i_flow]))
	
               gevent.sleep(1)

               if nodes[jj].ip == eth_ip[int(src[i_flow])-1]:
                  print ("CLIENT: nodes.ip={}: {}-->{}".format(nodes[jj].ip,eth_ip[int(src[i_flow])-1],eth_ip[int(dst[i_flow])-1]))
#                  print ("{}-->{}".format(wlan_ip[int(src[i_flow])-1],wlan_ip[int(dst[i_flow])-1]))
#                  exec_time = datetime.datetime.now() + datetime.timedelta(int(t_start[i_flow]))
#                  controller.callback(csResultCollector1).nodes(nodes[jj]).net.start_packetflow(str(wlan_ip[int(dst[i_flow])-1]), str(port[i_flow]), str(t_stop[i_flow]))

                  lcpDescriptor = controller.node(nodes[jj]).hc.start_local_control_program(program=react)
                  msg={"iface":"wlan0","i_time":1,"iperf_rate":6000,"enable_react":True}
                  lcpDescriptor.send(msg)
		
          break;
			
        """
        gevent.sleep(1)
        print("\nConnected nodes", [str(node.name) for node in nodes])
	
        if len(nodes) == 6:

#SETUP NODES, RUN REACT
          for ii in range(0, len(nodes)):
           if nodes[ii].ip in eth_ip:
             pos=eth_ip.index(nodes[ii].ip)
             rvalue = controller.nodes(nodes[ii]).net.start_adhoc(driver[pos],"wlan0","wishful-react",freq[pos],tx_power[pos],"6",wlan_ip[pos],"250","aa:bb:cc:dd:ee:ff",True)
             gevent.sleep(5)
             rvalue = controller.nodes(nodes[ii]).net.start_monitor(driver[pos],"wlan0")
             gevent.sleep(5)
             lcpDescriptor = controller.node(nodes[ii]).hc.start_local_control_program(program=react)
             msg={"iface":"wlan0","i_time":1,"iperf_rate":int(bw_req[ii]),"enable_react":False}
             lcpDescriptor.send(msg)
#SETUP EXPERIMENT

          break
        """

if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)
    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
