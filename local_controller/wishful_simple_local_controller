#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_simple_local_controller.py: First implementation of WiSHFUL controller

Usage:
   wishful_simple_local_controller.py [options] [-q | -v]

Options:
   --config configFile config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_agent
import time
import yaml
import wishful_upis as upis

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

@controller.add_callback(upis.radio.set_channel)
def set_channel_reponse(data):
    print "{} set_channel_reponse : {}".format(datetime.datetime.now(),data)
    controller.delay(4).net.create_packetflow_sink(port=1234)

@controller.add_callback(upis.radio.get_power)
def get_power_reponse(data):
    print "{} get_power_reponse : {}".format(datetime.datetime.now(),data)

@controller.set_default_callback()
def default_callback(cmd, data):
    print "{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data)

def print_response(data):
    print "{} Specific callback for function call; Print response : {}".format(datetime.datetime.now(),data) 


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()
   
    #control loop
    while True:
        print "\nNext iteration:"
        #execute non-blocking function immediately
        controller.blocking(False).radio.iface("wlan0").set_power(12)

        #execute non-blocking function immediately, with specific callback
        controller.callback(print_response).radio.iface("wlan0").get_power()

        #schedule non-blocking function delay
        controller.delay(3).net.create_packetflow_sink(port=1234)
        
        #schedule non-blocking function delay
        exec_time = datetime.datetime.now() + datetime.timedelta(seconds=6)
        aa = controller.exec_time(exec_time).radio.iface("wlan1").set_channel(4)

        #execute blocking function immediately
        result = controller.radio.iface("wlan1").get_channel()
        print "{} Channel is:".format(datetime.datetime.now(), result)

        time.sleep(15)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logging.basicConfig(level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        agent.stop()