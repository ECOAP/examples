#!/usr/bin/env python
# -*- coding: utf-8 -*-

import datetime
import logging
import wishful_agent
import time
import wishful_upis as upis

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')
log = logging.getLogger('BasicLocalController')

#Create agent
agent = wishful_agent.Agent(local=True)

#Configure agent
agent.add_module(moduleName="simple", pyModule="wishful_module_simple", 
                 className="SimpleModule2", interfaces=['wlan0', 'wlan1'])

agent.add_module(moduleName="iperf", pyModule="wishful_module_iperf", 
                 className="IperfModule")

#Get local controller
controller = agent.get_local_controller()


@controller.add_callback(upis.radio.get_power)
def get_power_reponse(data):
    print "{} get_power_reponse : {}".format(datetime.datetime.now(),data)

@controller.set_default_callback()
def default_callback(cmd, data):
    print "{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data)

def print_response(data):
    print "{} Specific callback for function call; Print response : {}".format(datetime.datetime.now(),data) 


try:
    #Start agent
    agent.run()

    #control loop
    while True:
        print "\nNext iteration:"
        #execute non-blocking function immediately
        controller.blocking(False).radio.iface("wlan0").set_power(12)

        #execute non-blocking function immediately, with specific callback
        controller.callback(print_response).radio.iface("wlan0").get_power()

        #schedule non-blocking function delay
        controller.delay(3).net.create_packetflow_sink(port=1234)
        
        #schedule non-blocking function exec time
        exec_time = datetime.datetime.now() + datetime.timedelta(seconds=6)
        controller.exec_time(exec_time).radio.iface("wlan1").set_channel(4)

        #execute blocking function immediately
        result = controller.radio.iface("wlan1").get_channel()
        print "{} Channel is: {}".format(datetime.datetime.now(), result)

        time.sleep(15)

except KeyboardInterrupt:
    print "Local Controller exits"

finally:
    agent.stop()