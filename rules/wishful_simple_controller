#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py [options] [-q | -v]

Options:
   -f                  foo
   --config configFile config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import wishful_upis as upis
import wishful_framework as fw

__author__ = "Piotr Gawlowicz, Anatolij Zubow"
__copyright__ = "Copyright (c) 2015, Technische Universitat Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, zubow}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller(dl="tcp://127.0.0.1:8990", ul="tcp://127.0.0.1:8989")
nodes = []

#TODO: allways return call_id to identify response in callback?

@controller.new_node_callback()
def printNodeName(node):
    nodes.append(node.id)
    print "New node appeared:"
    print node


@controller.node_exit_callback()
def printNodeName(node, reason):
    if node.id in nodes:
        nodes.remove(node.id);
    print "NodeExit : NodeID : {} Reason : {}".format(node.id, reason)


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print "DEFAULT CALLBACK : Group: {}, NodeId: {}, Cmd: {}, Returns: {}".format(group, node.id, cmd, data)


@controller.add_callback(upis.radio.set_channel)
def set_channel_reponse(group, node, data):
    print "set_channel_reponse : Group:{}, NodeId:{}, msg:{}".format(group, node.id, data)


def rule_matched(group, node, data):
    print "Print response : Group:{}, NodeId:{}, Result:{}".format(group, node.id, data) 


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
   
    #control loop
    while True:
        gevent.sleep(5)
        print "Connected nodes", nodes
        if nodes:
            break

    #TODO: add args and repeat number to event definition
    #TODO: return some ruleId so we can remove it later
    controller.nodes(nodes[0]).rule(event=(upis.radio.get_noise, 2),
                                    filters=("FILTER(MOV_AVG, 10)"),
                                    match=(">", -90), 
                                    action=(upis.radio.set_channel, 7),
                                    permanence="TRANSIENT",
                                    callback=rule_matched)


    '''
    controller.nodes(nodes[0]).add_rule(event=TimeEvent(func=upis.radio.get_noise, args=(), interval=2, iface="wlan0"),
                                    filters=[Filter(MOV_AVG, 10), Filter(PeakDetector, 50)],
                                    match=Match(">", -90),
                                    action=Action(upis.radio.set_channel, args=(7)),
                                    permanence=Permanance.TRANSIENT,
                                    ctrl_callback=rule_matched)

    controller.nodes(nodes[0]).add_rule(event=PktEvent(iface="wlan0"),
                                    pmatch=PMatch("icmp", "ether.dst 00:11:00:11:00:11"),
                                    selector=FieldSelector("Radiotap.rssi"),
                                    filters=[Filter(MOV_AVG, 10), Filter(PeakDetector, 50)],
                                    match=Match(">", -90),
                                    action=Action(upis.radio.set_channel, args=(7)),
                                    permanence=Permanance.TRANSIENT,
                                    ctrl_callback=rule_matched)
    '''
    while True:
        gevent.sleep(5)
        print "Connected nodes", nodes



if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logging.basicConfig(level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.kill()