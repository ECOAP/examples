#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
local_controller.py: A Wishful local controller which retrieves MAC layer statistics, i.e. number of transmitted/received
bytes, for each station served by the corresponding AP.

Usage:
   local_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./local_controller -v --config ./config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
from datetime import datetime
import logging
import wishful_agent
import time
import yaml
import wishful_upis as upis

__author__ = "Piotr Gawlowicz, Anatolij Zubow"
__copyright__ = "Copyright (c) 2016, Technische UniversitÃ¤t Berlin"
__version__ = "0.1.0"

log = logging.getLogger('wishful_controller.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()
   
    wifi_iface = "ap1-wlan0"

    # control loop
    while True:
        tx_bytes = controller.blocking(True).net.iface(wifi_iface).get_tx_bytes_of_connected_devices()
        rx_bytes = controller.blocking(True).net.iface(wifi_iface).get_rx_bytes_of_connected_devices()

        # STA_MAC_addr -> (value, unit)
        log.info('STA1: TX/RX %s/%s' % (tx_bytes['02:00:00:00:00:00'][0], rx_bytes['02:00:00:00:00:00'][0]))
        log.info('STA2: TX/RX %s/%s' % (tx_bytes['02:00:00:00:01:00'][0], rx_bytes['02:00:00:00:01:00'][0]))

        time.sleep(1)

if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except Exception as ex:
        log.debug(ex)
    finally:
        log.debug("Exit")
        agent.stop()
