#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wishful_controller_simple.py: First implementation of WiSHFUL controller

Usage:
   wishful_controller_simple.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import gevent
import yaml
import time
import random

sys.path.append('../../../')
sys.path.append("../../../agent_modules/wifi_ath")
sys.path.append("../../../agent_modules/wifi_wmp")
sys.path.append("../../../agent_modules/wifi")
sys.path.append('../../../upis')
sys.path.append('../../../framework')
sys.path.append('../../../agent')
sys.path.append('../../../controller')


import wishful_upis as upis
import wishful_controller

from examples.wmp.year1_showcase3.wmp_helper.controller_utils import *
from examples.wmp.year1_showcase3.wmp_helper.TestbedTopology import TestbedTopology
#from examples.wmp_edca.wmp_helper.MeasurementManager import *
#from examples.wmp_edca.wmp_helper.TestbedTopology import *
from agent_modules.wifi_wmp.wmp_structure import UPI_R
from local_control_program import *

__author__ = "Domenico Garlisi"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{domenico.garlisi@cnit.it"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
mytestbed = TestbedTopology("wmp_radio_program", log)
nodes = []

@controller.new_node_callback()
def new_node(node):
    print("New node appeared:")
    print(node)
    nodes.append(node)
    mytestbed.add_wmp_node(node, 'STA')

@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("DEFAULT CALLBACK : Group: {}, NodeId: {}, Cmd: {}, Returns: {}".format(group, node.id, cmd, data))

@controller.add_callback(upis.radio.set_parameter_lower_layer)
def set_parameters_reponse(node, cmd, data):
    print("set_parameter_lower_layer CALLBACK : {} set_channel_reponse : {}".format(datetime.datetime.now(),data))

def print_response(par_1, par_2, data):
    print("{} Specific callback for function call; Print response : {}".format(datetime.datetime.now(),data))

def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
    mytestbed.initializeTestbedTopology()
    num_testbed_nodes = mytestbed.getExperimentNodesNumber()

    nodes_platform_info = []
    #control loop
    while True:
        gevent.sleep(10)
        print("\n")
        print("Connected nodes", [str(node.name) for node in nodes])

        if len(nodes) == num_testbed_nodes:

            #get node capabilities
            nodes_platform_info.append(get_platform_information( nodes[0], log, controller))

            #run execution engine
            mytestbed.initializeTestbedFunctions(controller)

            # UPIargs_1 = { 'interface' : 'wlan0', 'parameters' : [UPI_R.CSMA_CW, UPI_R.CSMA_CW_MIN, UPI_R.CSMA_CW_MAX] }
            # # node_parameters = controller.nodes(nodes[0]).radio.get_parameter_lower_layer(UPIargs_1)
            # # print("node_parameters : %s" % str(node_parameters) )
            # UPIargs_2 = { 'interface' : 'wlan0', UPI_R.CSMA_CW: 127, UPI_R.CSMA_CW_MIN : 127, UPI_R.CSMA_CW_MAX : 511 }
            # # node_result = controller.nodes(nodes[0]).radio.set_parameter_lower_layer(UPIargs)
            # # print("node_result : %s" % str(node_result) )
            #
            #
            # print("Start upi remote call")
            # #execute non-blocking function immediately
            # controller.blocking(False).nodes(nodes[0]).radio.set_parameter_lower_layer(UPIargs_2)
            #
            # #execute non-blocking function immediately, with specific callback
            # controller.callback(print_response).nodes(nodes[0]).radio.get_parameter_lower_layer(UPIargs_1)
            #
            # #schedule non-blocking function delay
            # controller.delay(3).nodes(nodes[0]).radio.get_parameter_lower_layer(UPIargs_1)
            #
            # #schedule non-blocking function exec time
            # exec_time = datetime.datetime.now() + datetime.timedelta(seconds=6)
            # controller.exec_time(exec_time).nodes(nodes[0]).radio.get_parameter_lower_layer(UPIargs_1)
            #
            # #execute blocking function immediately
            # result = controller.nodes(nodes[0]).radio.set_parameter_lower_layer(UPIargs_2)
            # print("{} setting (0 for SUCCESS) : {}".format(datetime.datetime.now(), result))


            # print("Deploy local control program on a remote node")
            # lcpDescriptor = controller.node(nodes[0]).hc.start_local_control_program(program=my_local_control_program)
            # msgNum = 5
            # while msgNum:
            #     newCh = random.randint(1, 30)
            #     print("Send ctrl message to remote control program")
            #     lcpDescriptor.send({"new_channel": newCh})
            #
            #     while True:
            #         msg = lcpDescriptor.recv(timeout=1)
            #         if msg:
            #             print("Recv ctrl message from remote local control program")
            #             msgNum = msgNum - 1
            #             break
            #
            #     gevent.sleep(10)
            #
            # print("Terminate remote local control program")
            # lcpDescriptor.close()


            # ''' START MAIN CONTROL PROGRAM '''
            # if disable:
            #     stop_local_controller(mytestbed)
            #     return
            #
            # # register callback function for collecting results
            # mytestbed.global_mgr.setCtrlCollector(ctrlMsgCollector)
            # # deploy a custom control program on each node
            # CtrlFuncImpl = customLocalCtrlFunction
            # # get current time
            # now = get_now_full_second()
            # # exec immediately
            # exec_time = now + timedelta(seconds=3)
            # log.warning('Sending local WiSHFUL controller on all nodes - start at : %s', str(exec_time))
            #
            # #nodes = upi_hc.getNodes()
            # for node in mytestbed.wifinodes:
            #     node.measurement_types.append('FREEZING_NUMBER')
            #     node.measurement_types.append('CW')
            # nodes = mytestbed.nodes
            #
            #
            # ''' IMPLEMENT PYTHON VISUALIZER '''
            # ''' implement message zmq for realtime visualizer '''
            # #global socket_visualizer
            # #port = "12345"
            # #context = zmq.Context()
            # #socket_visualizer = context.socket(zmq.PUB)
            # #socket_visualizer.bind("tcp://*:%s" % port)
            #
            # ''' implement OML database setup for realtime visualizer '''
            # #global omlInst
            # #omlInst = oml4py.OMLBase("LocalControlProgram", "WiSHFUL", socket.gethostname(),"tcp:am.wilab2.ilabt.iminds.be:3004")
            # #omlInst.addmp("IEEE802154_MACSTATS", "timestamp:int32 nodeID:int32 packetSize:int32 activeRadioprogram:string timeDiff:int32 numTxRequest:int32 numTxRequestFail:int32 numTxAttempt:int32 numTxSuccess:int32 numTxFail:int32 numTxBusy:int32 numTxNoAck:int32 numTxCollision:int32 numRx:int32 avgBackoffExponent:int32")
            # #omlInst.start()
            #

            print("Deploy local control program on a remote nodes")
            lcpDescriptor_node_0 = controller.node(nodes[0]).hc.start_local_control_program(program=local_control_program)
            lcpDescriptor_node_0.send( {'interface' : 'wlan0', 'tuning_enabler' : 2})
            # CtrlFuncargs =  {'interface' : 'wlan0','tuning_enabler' : 1}
            # lcpDescriptor_nodes = controller.node(nodes[1]).hc.start_local_control_program(program=local_control_program)
            log.warning("Local logic STARTED")

            msgNum = 5
            while msgNum:
                #traffic_number = get_traffic()
                traffic_number = random.randint(1, 10)
                print("Send ctrl message to remote control program")
                lcpDescriptor_node_0.send({"traffic_number": traffic_number})

            #
            #     while True:
            #         msg = lcpDescriptor_nodes.recv(timeout=1)
            #         if msg:
            #             print("Recv ctrl message from remote local control program")
            #             msgNum = msgNum - 1
            #             break
            #
                gevent.sleep(1)




            print("Terminate remote local control program")
            lcpDescriptor_node_0.close()
            #lcpDescriptor_nodes.close()

            while True:
                gevent.sleep(10)
                print('WAIT')




if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()