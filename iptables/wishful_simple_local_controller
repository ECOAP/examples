#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wishful_simple_local_controller.py: First implementation of WiSHFUL controller

Usage:
   wishful_simple_local_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_agent
import time
import yaml
import iptc
import wishful_upis as upis
from wishful_framework.upi_arg_classes.flow_id import FlowId

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

def printIpTable(table):
    log = logging.getLogger('wishful_agent.main')
    for chain in table.chains:
        log.info("=======================")
        log.info("Chain %s, Sent pkts: %s, Sent Bytes: %s" % (chain.name, chain.pktCounter, chain.byteCounter))
        for rule in chain.rules:
            log.info("Rule proto: %s , src: %s, dst: %s, in: %s, out: %s" % (str(rule.protocol), str(rule.src), str(rule.dst), str(rule.in_interface), str(rule.out_interface)))
            log.info("Matches:")
            for match in rule.matches:
                log.info(match.name)
            log.info("Target: %s" % rule.target.name)
            log.info("Sent pkts: %s, Sent Bytes: %s" % (rule.pktCounter, rule.byteCounter))

    log.info("=======================")


@controller.set_default_callback()
def default_callback(cmd, data):
    print("{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data))


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()

    #################################################################################################

    flowId = FlowId(srcAddress="192.168.103.69", dstAddress="192.168.103.1", prot="tcp", dstPort="22")
    response = controller.net.set_pkt_marking(flowId, markId=12)
    print(response)

    response = controller.net.set_ip_tos(flowId, tos=40)
    print(response)

    table = controller.net.get_nf_table(tableName="mangle")
    printIpTable(table)

    response = controller.net.del_pkt_marking(flowId, markId=12)
    print(response)

    response = controller.net.del_ip_tos(flowId, tos=40)
    print(response)

    table = controller.net.get_nf_table(tableName="mangle")
    printIpTable(table)

    response = controller.net.clear_nf_tables()
    print(response)


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        agent.stop()